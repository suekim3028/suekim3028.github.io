<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://suekim3028.github.io/blog</id>
    <title>Soobeen Kim Blog</title>
    <updated>2024-05-15T08:50:20.922Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://suekim3028.github.io/blog"/>
    <subtitle>Soobeen Kim Blog</subtitle>
    <icon>https://suekim3028.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[attachments/Pasted]]></title>
        <id>https://suekim3028.github.io/blog/attachments/Pasted</id>
        <link href="https://suekim3028.github.io/blog/attachments/Pasted"/>
        <updated>2024-05-15T08:50:20.922Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Progressive Web App]]></title>
        <id>https://suekim3028.github.io/blog/pwa</id>
        <link href="https://suekim3028.github.io/blog/pwa"/>
        <updated>2024-05-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[프로그레시브 웹앱이란?]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="프로그레시브-웹앱이란">프로그레시브 웹앱이란?<a href="https://suekim3028.github.io/blog/pwa#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9%EC%95%B1%EC%9D%B4%EB%9E%80" class="hash-link" aria-label="Direct link to 프로그레시브 웹앱이란?" title="Direct link to 프로그레시브 웹앱이란?">​</a></h3>
<ul>
<li>기존의 모바일 앱만이 가능했던 기능들 (platform dependent)<!-- -->
<ul>
<li>위치정보, 푸쉬 등</li>
</ul>
</li>
<li>-&gt; 이러한 기능들을 '웹 브라우저'가 지원하기 시작하면서<!-- -->
<ul>
<li>앱 설치 없이</li>
<li>단일 코드 베이스로</li>
<li>모든 웹 사용자가 사용가능
해짐!</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="프로그레시브-웹앱의-주요-기능들">프로그레시브 웹앱의 주요 기능들<a href="https://suekim3028.github.io/blog/pwa#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9%EC%95%B1%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EB%8A%A5%EB%93%A4" class="hash-link" aria-label="Direct link to 프로그레시브 웹앱의 주요 기능들" title="Direct link to 프로그레시브 웹앱의 주요 기능들">​</a></h3>
<ol>
<li>
<p>Capable</p>
<ul>
<li>기존의 platform specific app 에서만 가능했던 기능들을 사용자 권한 허용을 기반으로 제공함</li>
<li><img decoding="async" loading="lazy" src="https://suekim3028.github.io/assets/images/Pasted%20image%2020240515175117-81b90ea647d8580482532529b332f5f8.png" width="1400" height="430" class="img_ev3q">
<span style="font-size:10px;color:gray"> 이미지 출처: <a href="https://medium.com/watcha/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EB%AF%B8%EB%94%94%EC%96%B4-%EA%B6%8C%ED%95%9C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EA%B0%84%EB%8B%A8-tip-ee9e42ce9cb1" target="_blank" rel="noopener noreferrer">https://medium.com/watcha/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EB%AF%B8%EB%94%94%EC%96%B4-%EA%B6%8C%ED%95%9C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EA%B0%84%EB%8B%A8-tip-ee9e42ce9cb1</a> </span></li>
</ul>
</li>
<li>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reliable">Reliable<a href="https://suekim3028.github.io/blog/pwa#reliable" class="hash-link" aria-label="Direct link to Reliable" title="Direct link to Reliable">​</a></h2>
</li>
</ol>]]></content>
        <author>
            <name>Soobeen Kim</name>
            <uri>https://github.com/suekim3028</uri>
        </author>
        <category label="web" term="web"/>
        <category label="pwa" term="pwa"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js14] 유저 로그인 여부에 따른 router redirect]]></title>
        <id>https://suekim3028.github.io/blog/next-14-redirect-by-auth</id>
        <link href="https://suekim3028.github.io/blog/next-14-redirect-by-auth"/>
        <updated>2024-05-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[app 과 같은 레벨에 있는 middleware 에서 쿠키 확인]]></summary>
        <content type="html"><![CDATA[<p>app 과 같은 레벨에 있는 middleware 에서 쿠키 확인
app 과 같은 레벨에 있는 middleware 에서 쿠키 확인
token 을 set할 때 cookie에도 set (cookie set할때마다 middleware가 돌기 때문에 값이 다를때만 set하기)</p>
<p>app layout 에서 useEffect를 통해 새로고침이 될때마다만 쿠키에서 accessToken 확인 및 유저 정보 가져옴 -&gt; refresh 한 경우 새로운 토큰 cookie에 저장</p>]]></content>
        <author>
            <name>Soobeen Kim</name>
            <uri>https://github.com/suekim3028</uri>
        </author>
        <category label="web" term="web"/>
        <category label="webserver" term="webserver"/>
        <category label="Nextjs" term="Nextjs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSR 과 SSR]]></title>
        <id>https://suekim3028.github.io/blog/csr-ssr</id>
        <link href="https://suekim3028.github.io/blog/csr-ssr"/>
        <updated>2024-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.]]></summary>
        <content type="html"><![CDATA[<p><code>이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="csr과-ssr">CSR과 SSR<a href="https://suekim3028.github.io/blog/csr-ssr#csr%EA%B3%BC-ssr" class="hash-link" aria-label="Direct link to CSR과 SSR" title="Direct link to CSR과 SSR">​</a></h2>
<ul>
<li>CSR (Client Side Rendering)</li>
<li>SSR (Server Side Rendering)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="csr">CSR<a href="https://suekim3028.github.io/blog/csr-ssr#csr" class="hash-link" aria-label="Direct link to CSR" title="Direct link to CSR">​</a></h3>
<ul>
<li>
<p>등장</p>
<ul>
<li>초창기 웹 렌더링 방식<!-- -->
<ul>
<li>모든 웹페이지가 정적 페이지</li>
<li>페이지에 변화가 일어났을 때(링크를 통해 다른 페이지로 이동한 경우 등)는 어떤 과정이 일어날까?<!-- -->
<ul>
<li>그때마다 서버에서 HTML 전송받음
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%201-b6df55bf6af69bab4bf596b44f03f1ec.png" width="1138" height="539" class="img_ev3q">
<ul>
<li>url에 접속할 때마다 웹서버에 요청을 보내고, HTML 파일이 chunk 로 나누어져서 옴</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Ajax (Asynchronous JavaScript and XML)의 등장<!-- -->
<ul>
<li>페이지 변화 → 필요한 부분의 데이터만을 Ajax function을 통해 서버에서 불러와서 동적으로 화면 업데이트
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%202-1b61b688702ef2a580f622b3aa002411.png" width="1942" height="1577" class="img_ev3q"></li>
</ul>
</li>
<li>다양한 과정을 브라우저에서 처리할 수 있게 되면서, 브라우저(client)에 전적으로 웹 렌더링을 위임하는 CSR 보편화!</li>
</ul>
</li>
<li>
<p>개념</p>
<ul>
<li>browser 상에서 <strong>javascript 를 통해 DOM을 조작</strong>하여 렌더링하는 것</li>
</ul>
</li>
<li>
<p>과정</p>
<ol>
<li>유저가 웹페이지에 접속하면, 브라우저가 해당 웹사이트의 ip주소로 해당 웹페이지 리소스에 대한 요청 전송</li>
<li>웹서버에서 HTML 파일(빈 html)과 JS로 접근할 수 있는 링크를 브라우저로 전달</li>
<li>클라이언트가 JS 다운로드</li>
<li>다운로드된 JS가 DOM 업데이트를 통해 콘텐츠 렌더링</li>
</ol>
</li>
<li>
<p>JS가 브라우저 상에서 DOM 을 조작한다고 했는데, 어떻게 이루어질까?</p>
<ul>
<li>우리가 알고있는 방법?<!-- -->
<ul>
<li>html의 element가 가지고 있는 innerHTML 속성 활용<!-- -->
<ul>
<li>이미 존재하는 element의 innerHTML에 string 형태로 콘텐츠를 삽입하면, 브라우저가 해당 내용을 파싱해서 DOM에 추가함</li>
</ul>
</li>
<li>document.createElement method 활용<!-- -->
<ul>
<li>브라우저 HTML 파싱 없이 새로운 element 추가 가능</li>
</ul>
</li>
<li>document.write method 활용<!-- -->
<ul>
<li>HTML을 직접 document에 넣을 수 있음 (string 형태 - 브라우저 파싱 필요)</li>
<li>추천하지 않는 방식
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%203-218659319bb861105cc5c277201e5efd.png" width="1296" height="626" class="img_ev3q"></li>
</ul>
</li>
</ul>
</li>
<li>2회차 과제는 CSR? SSR?
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%204-e83b14eefb4603aec9b7c0dfcdaef815.png" width="1584" height="279" class="img_ev3q"></li>
<li>정적인 페이지와 다르게 HTML에 대한 파싱과 렌더링 과정이 chunk로 나누어져 있지 않기 때문에, 그 과정동안 <strong>유저의 인터랙션이 불가능 (이후 더 자세한 설명)</strong></li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ssr">SSR<a href="https://suekim3028.github.io/blog/csr-ssr#ssr" class="hash-link" aria-label="Direct link to SSR" title="Direct link to SSR">​</a></h3>
<ul>
<li>
<p>등장</p>
<ul>
<li>초기의 php 웹개발 방식이 SSR<!-- -->
<ul>
<li>PHP = Hypertext Preprocessor</li>
<li>php로 작성된 코드가 html string으로 변환되면, 해당 string을 서버가 html 형태로 전달</li>
</ul>
</li>
<li>이후 CSR이 보편화된 이후 CSR에 대비한 개념으로 명칭이 생겨남<!-- -->
<ul>
<li>CSR로 모든 웹개발을 했으면 안됐을까? 무슨 문제가 있을까?<!-- -->
<ul>
<li>JS가 비대해지면서 렌더링까지 걸리는 과정이 오래 걸림</li>
<li>브라우저에 독립적인 부분은 서버에서 바로 HTML 형태로 보내주면 JS를 줄일 수 있음!</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>개념</p>
<ul>
<li>HTML 상의 어플리케이션을 서버에서 렌더링 하는 것</li>
</ul>
</li>
<li>
<p>과정</p>
<ol>
<li>유저가 웹페이지에 접속하면, 브라우저가 해당 웹사이트의 ip주소로 해당 웹페이지 리소스에 대한 요청 전송</li>
<li>서버에서 해당 요청에 대한 HTML 을 만드는데 필요한 데이터 가져오기 등을 모두 실행하고, 해당 데이터를 가지고 HTML 을 만들어 응답 전송</li>
<li>브라우저가 전달받은 HTML을 렌더링</li>
<li>인터랙션과 관련된 내용이 담긴 자바스크립트를 다운로드</li>
<li>브라우저가 Javascript 프레임워크를 실행</li>
</ol>
</li>
<li>
<p>vanilaJS 로 SSR을 개발한다면</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">express</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"express"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">express</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;!DOCTYPE html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;html lang="en"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      &lt;meta charset="UTF-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      &lt;title&gt;제목입니다&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;/head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;div id="app"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      &lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">        &lt;li&gt;안녕하세요&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">        &lt;li&gt;리스트입니다&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      &lt;/ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;/html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">8000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"listen to http://localhost:8000"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>유저 id 1번에 대한 정보를 보여주는 웹페이지 를 들어갔을 때</p>
<ul>
<li>csr<!-- -->
<ul>
<li>브라우저가 웹서버에 http request 전송</li>
<li>웹서버에서 빈 html 파일과 js에 대한 url 보내줌</li>
<li>브라우저가 js url 에 http request를 보내서 js 파일을 받아옴</li>
<li>js 안에 있는 내용<!-- -->
<ul>
<li>user 정보를 가져오는 api fetch</li>
<li>api에서 온 정보로 html을 업데이트</li>
<li>버튼 등에 대한 이벤트 핸들러 부착</li>
</ul>
</li>
<li>js가 실행되면서 user 정보가 dom에 보이게 됨</li>
</ul>
</li>
<li>ssr<!-- -->
<ul>
<li>브라우저가 웹서버에 http request 전송</li>
<li>웹서버에서 해당 request를 받았을 때<!-- -->
<ul>
<li>데이터베이스에서 유저 정보를 가져옴</li>
<li>해당 유저정보를 활용해 html string을 만들어 response로 전송</li>
</ul>
</li>
<li>브라우저가 이미 유저정보가 들어있는 html을 받아서 렌더링</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="csr과-ssr-비교">CSR과 SSR 비교<a href="https://suekim3028.github.io/blog/csr-ssr#csr%EA%B3%BC-ssr-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="Direct link to CSR과 SSR 비교" title="Direct link to CSR과 SSR 비교">​</a></h3>
<p><strong>그 전에..</strong></p>
<ul>
<li>
<p>웹페이지의 퀄리티를 결정하는 요소들에는 무엇이 있을까?</p>
</li>
<li>
<p>용어</p>
<ul>
<li>Time to First Byte (TTFB)<!-- -->
<ul>
<li>link를 클릭하고 콘텐츠의 첫번째 Byte가 도착할 때까지의 시간</li>
</ul>
</li>
<li>First Contentful Paint (FCP)<!-- -->
<ul>
<li>페이지 로딩~페이지의 일부 요소가 스크린에 렌더링된 시점까지의 시간</li>
</ul>
</li>
<li>Interaction to Next Paint (INP)<!-- -->
<ul>
<li>유저의 인터랙션에 따라 필요한 페인팅이 얼마나 짧은 시간 안에 이루어지는지</li>
<li>Core Web Vital metric에 추가됨</li>
</ul>
</li>
<li>Time To Interactive (TTI)<!-- -->
<ul>
<li>페이지 로딩 시작부터 모든 sub-resource 로딩이 끝나 user input에 빠르게 대응할 수 있는 상태까지 걸리는 시간
<img decoding="async" loading="lazy" alt="a-page-load-timeline-show-762f93f25ad4b.svg" src="https://suekim3028.github.io/assets/images/a-page-load-timeline-show-762f93f25ad4b-d910edf30e4aea504c0fcec532c7c1a9.svg" width="958" height="566" class="img_ev3q"></li>
<li>main thread 상에서 50ms 이상의 긴 task 가 더이상 일어나지 않고, 2개 이상의 get request 대기가 없는 5초 이상의 quiet window 가 발생하면, 마지막 Long task가 끝난지점 (Long task가 없었던 경우 FCP 시점)을 TTI로 계산함</li>
</ul>
</li>
<li>Total Blocking Time (TBT)<!-- -->
<ul>
<li>page를 load 하는 동안 main thread가 블락킹 되는 시간의 합<!-- -->
<ul>
<li>blocking의 정의: main thread 상에 Long Task가 있는 상태</li>
<li>유저가 interaction을 할 수 있지만, 그 interaction에 대응하기 위해서는 task가 끝날 때까지 기다려야함</li>
</ul>
</li>
<li>FCP ~ TTI 의 사이에 발생하는 Long task 들이 50ms를 초과한 만큼의 합</li>
<li>INP 와 correlate 하는 경향이 있기 때문에 INP를 계산하는 proxy metric으로 사용됨</li>
</ul>
</li>
</ul>
</li>
<li>
<p>다시 복기해보자!</p>
<ul>
<li>TTFB</li>
<li>FCP</li>
<li>INP</li>
<li>TTI</li>
<li>TBT</li>
<li>여기서 관계 있는 아이들
TBT, INP</li>
</ul>
</li>
<li>
<p>SSR</p>
<ul>
<li>웹페이지로 navigation 되었을 때, server에서 해당 페이지의 full HTML을 생성함<!-- -->
<ul>
<li>data fetching 이나 templating 을 위한 추가적인 round-trips for data fetching을 제거<!-- -->
<ul>
<li>서버에서 모두 처리하기 때문</li>
</ul>
</li>
</ul>
</li>
<li>FCP, TBT, INP 는 어떨까?<!-- -->
<ul>
<li>보통 fast FCP</li>
<li>client에 많은 JS를 넘겨주지 않기 때문에, TBT가 낮아짐 → INP에도 긍정적 영향<!-- -->
<ul>
<li>페이지 로드 동안 main thread가 blocking 되는 경우가 많이 없기 때문에</li>
</ul>
</li>
<li>이미 페이지를 가져오는 시점에 HTML 파일에 링크나 버튼 등의 콘텐츠가 들어있기 때문에, 유저 입장에서 FCP 시점에서도 이미 interactive 하게 보임 → 유저 인터랙션이 빠르게 일어날 수 있음<!-- -->
<ul>
<li>하지만 그 상황에서 main thread가 blocking 되어있거나 js가 load되지 않아서 interactive 하지 않은 시점이 생길 수 있기 때문에 FCP와 TTI를 낮추는 것이 중요<!-- -->
<ul>
<li>유저가 기다리거나 최악의 경우 웹페이지가 동작하지 않는다고 생각 ⇒ 브랜드 이미지 손상
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%205-a099a3b0afc9339c975f459291f918aa.png" width="994" height="614" class="img_ev3q"></li>
</ul>
</li>
<li><strong>streaming server rendering</strong> 을 활용해 FCP와 TTI도 낮출 수 있음
<a href="https://suekim3028.github.io/assets/files/ssr-2-5abea4e3d79c77d34fb9375139266223.webm" target="_blank">ssr-2.webm</a>
<ul>
<li>서버에서 HTML을 모두 만든 뒤에 한번에 보내지 않고, chunk로 나누어서 그때그때 보내줌으로써 파트별로 rendering 이 일어날 수 있게 해서 long task 를 줄임</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>cost of javascript가 낮음<!-- -->
<ul>
<li><code>cost of javascript</code> Javascript를 download하고 브라우저의 main thread가 JS를 파싱하고 실행하는 데 쓰는 시간</li>
</ul>
</li>
<li>TTFB는?<!-- -->
<ul>
<li>TTFB가 높아지거나, 전달받는 데이터의 크기가 커짐</li>
<li>component caching, memoization 등 사용해 효율성 높일 수 있음</li>
</ul>
</li>
</ul>
</li>
<li>
<p>CSR</p>
<ul>
<li>data fetching, templating, routing 모두 client side에서 이루어짐
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%206-da5e410a9f794fc5a36a17e76faed4ca.png" width="1562" height="628" class="img_ev3q"></li>
<li>단점<!-- -->
<ul>
<li>앱이 커지면 커질수록 INP가 안좋아짐<!-- -->
<ul>
<li>JS가 다운로드되고 HTML 관련 내용을 파싱하고 렌더링하는 과정이 chunked up 되어있지 않기 때문에, 한번에 너무 많은 HTML/DOM 을 업데이트하는 경우 INP에 악영향</li>
<li>polyfill 이나 third-party JS가 추가될수록 더욱 악영향</li>
</ul>
</li>
<li>JS가 큰 경우 aggressive code-splitting 기법을 통해 TBT와 INP 를 낮출 수 있음</li>
</ul>
</li>
</ul>
</li>
<li>
<p>SEO 관점</p>
<ul>
<li>SSR! crawler가 쉽게 완성된 html을 볼 수 있음</li>
<li>크롤러가 JS를 이해할 수 있더라도, 보통은 제한사항들이 있음</li>
</ul>
</li>
<li>
<p>CSR ? SSR?</p>
<ul>
<li>
<p>개발하는 어플리케이션의 성격에 따라 선택하는 것이 맞음</p>
</li>
<li>
<p>또한, 페이지 별로도 다르게 가져갈 수 있는 부분</p>
</li>
<li>
<p>CSR을 선택하더라도, 우리가 사용하는 library/framework 등에서 컴포넌트에 대한 SSR을 지원함</p>
<ul>
<li>JS가 모든 부분을 그리게 하기보다, 일부 컴포넌트들은 서버에서 그리고, HTML streaming 까지 활용하면 CSR의 단점인 긴 TBT 와 INP 를 개선할 수 있음</li>
</ul>
</li>
<li>
<p>rehydration</p>
<ul>
<li>
<p>CSR과 SSR를 함께 함으로써 trade-off를 줄임</p>
</li>
<li>
<p>static hosting 또는 Server-side rendering으로 전달받은 static HTML 웹페이지의 element들에 JS가 event handler 등을 부착하여 동적 웹페이지로 바꾸는 기법</p>
<ul>
<li>server-rendered html의 DOM tree와 data를 재사용 가능하도록 함</li>
</ul>
</li>
<li>
<p>장단</p>
<ul>
<li>SSR의 장점인 빠른 FCP는 가져갈 수 있음</li>
<li>TBT와 INP에 대한 영향 있음<!-- -->
<ul>
<li>server에서 render한 HTML을 가져와서 빠르게 보여줘도, client쪽에서 다시 component를 실행하고 event handler등을 붙이는 과정동안 interaction이 불가능 함</li>
</ul>
</li>
</ul>
</li>
<li>
<p>우리가 만들었던 CSR Todo List 를 개선한다면?</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">TodoList</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./components.js"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">generateHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">model</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;!DOCTYPE html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;html lang="en"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;meta charset="UTF-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;title&gt;Todo List&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;/head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;div id="app"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation function maybe-class-name" style="color:#d73a49">Button</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation punctuation" style="color:#393A34">{</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation literal-property property" style="color:#36acaa">id</span><span class="token template-string interpolation operator" style="color:#393A34">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:#e3116c">"add"</span><span class="token template-string interpolation punctuation" style="color:#393A34">,</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation literal-property property" style="color:#36acaa">text</span><span class="token template-string interpolation operator" style="color:#393A34">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:#e3116c">"아이템 추가"</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation punctuation" style="color:#393A34">}</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation function maybe-class-name" style="color:#d73a49">Button</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation punctuation" style="color:#393A34">{</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation literal-property property" style="color:#36acaa">id</span><span class="token template-string interpolation operator" style="color:#393A34">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:#e3116c">"delete"</span><span class="token template-string interpolation punctuation" style="color:#393A34">,</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation literal-property property" style="color:#36acaa">text</span><span class="token template-string interpolation operator" style="color:#393A34">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:#e3116c">"아이템 삭제"</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation punctuation" style="color:#393A34">}</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">      </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation function maybe-class-name" style="color:#d73a49">TodoList</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation">model</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">todoItems</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">    **&lt;script src="./src/main.js" type="module"&gt;&lt;/script&gt;**</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c">  &lt;/html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string string" style="color:#e3116c"></span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
</li>
<li>
<p>cases</p>
<ul>
<li>wall mart
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%207-dc9979dbfdccced5b2c91af8fe1667eb.png" width="1038" height="341" class="img_ev3q">
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%208-5ff931e2113f1459dac56d7305b74f6d.png" width="545" height="340" class="img_ev3q">
<ul>
<li>wall mart의 경우 A/B test를 진행했을 때 빨리 렌더링이 될 때 더 좋은 engagement를 보임<!-- -->
<ul>
<li>SSR!</li>
</ul>
</li>
</ul>
</li>
<li>Netflix<!-- -->
<ul>
<li>첫 랜딩 페이지는 SSR로 가져오고, 그동안 interaction 이 많은 CSR 페이지들에 대한 JS prefetching 을 진행해 이후 해당 페이지로 넘어갔을 때 빠르게 로드될 수 있도록 함</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-rendering">Static Rendering<a href="https://suekim3028.github.io/blog/csr-ssr#static-rendering" class="hash-link" aria-label="Direct link to Static Rendering" title="Direct link to Static Rendering">​</a></h3>
<ul>
<li>build time에 이미 모든 일들이 이루어짐<!-- -->
<ul>
<li>url별 HTML이 이미 만들어져 있음 - 해당 렌더들을 미리 CDN등에 저장하는 edge distribution 하기도 함</li>
</ul>
</li>
<li>FCP, TBT, INP 모두 낮음<!-- -->
<ul>
<li>client-side JS가 제한되었을 경우</li>
</ul>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%209-e513672f56ca0d22436a140a86c54e37.png" width="1272" height="974" class="img_ev3q"></p>
<ul>
<li>SSR과 다른점<!-- -->
<ul>
<li>TTFB도 낮음<!-- -->
<ul>
<li>서버에서 페이지가 생성되는 시간이 필요 없기 때문</li>
</ul>
</li>
</ul>
</li>
<li>solutions<!-- -->
<ul>
<li>Gatsby<!-- -->
<ul>
<li>개발자들이 앱 렌더링이 build step 에서 이루어지지 않고 동적으로 이루어지는 것처럼 느끼게 함</li>
</ul>
</li>
<li>11ty, Jekyll, Metalsmith<!-- -->
<ul>
<li>템플릿 제공</li>
</ul>
</li>
</ul>
</li>
<li>challenge<!-- -->
<ul>
<li>모든 url별로 html 파일이 생성되어있어야 하기 때문에, 규모가 너무 많아서 어떤 url들이 가능할지 예상하기 어려운 경우 어려움</li>
</ul>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%2010-afcb20227519f1a2e168feca0868272f.png" width="2164" height="1434" class="img_ev3q"></p>]]></content>
        <author>
            <name>Soobeen Kim</name>
            <uri>https://github.com/suekim3028</uri>
        </author>
        <category label="rendering" term="rendering"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[웹서버, WAS, 로드밸런서]]></title>
        <id>https://suekim3028.github.io/blog/web-server-was-loadbalancer</id>
        <link href="https://suekim3028.github.io/blog/web-server-was-loadbalancer"/>
        <updated>2024-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.]]></summary>
        <content type="html"><![CDATA[<p><code>이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="인터넷--웹">인터넷 = 웹?<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9D%B8%ED%84%B0%EB%84%B7--%EC%9B%B9" class="hash-link" aria-label="Direct link to 인터넷 = 웹?" title="Direct link to 인터넷 = 웹?">​</a></h2>
<ul>
<li>인터넷<!-- -->
<ul>
<li><strong>인터넷</strong>은 <strong>컴퓨터를 네트워크 상에서 연결하는 기술 인프라</strong></li>
</ul>
</li>
<li>웹<!-- -->
<ul>
<li><strong>웹</strong> 은 인터넷 위에 구축된 웹 브라우저가 이해할 수 있는 서비스의 일종.<!-- -->
<ul>
<li>이메일 도 이러한 인터넷 서비스의 일중</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹의-동작-방식">웹의 동작 방식<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="Direct link to 웹의 동작 방식" title="Direct link to 웹의 동작 방식">​</a></h2>
<ul>
<li>
<p>웹이 동작하는 두가지 컴퓨터</p>
<ul>
<li>웹에는 클라이언트와 서버 라는 컴퓨터가 연결되어 있음<!-- -->
<ul>
<li>클라이언트<!-- -->
<ul>
<li>웹 사용자의 인터넷이 연결된 장치들<!-- -->
<ul>
<li>컴퓨터, 핸드폰 등</li>
</ul>
</li>
<li>장치들에서 이용할 수 있는 웹에 접근할 수 있는 소프트웨어<!-- -->
<ul>
<li>크롬 등 웹 브라우저</li>
</ul>
</li>
</ul>
</li>
<li>서버<!-- -->
<ul>
<li>
<p>웹페이지, 사이트, 앱을 저장하는 컴퓨터</p>
</li>
<li>
<p>클라이언트가 웹페이지에 접근하고자 할때, 서버로부터 웹페이지 사본을 다운받음</p>
</li>
<li>
<p>서버와 클라이언트 사이의 모든 연결은 TCP/IP 연결을 통해서 전송됨</p>
</li>
<li>
<p>UDP 프로토콜 또한 사용함 (실시간 동영상 시청)</p>
<aside><p>💡 <code>client</code> ⇒ <code>request</code> ⇒ <code>server</code>
<code>server</code> ⇒ <code>response</code> ⇒ <code>client</code></p></aside>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>동작 과정</p>
<ol>
<li>
<p>브라우저에 웹 주소 입력</p>
</li>
<li>
<p>브라우저가 **<code>DNS 서버</code>**로 가서 웹사이트가 있는 서버를 찾아냄</p>
<blockquote>
<p><code>**DNS 서버**</code> Domain Name System Servers</p>
<ul>
<li>웹사이트의 주소록과 같은 곳</li>
<li>브라우저는 HTTP 메시지를 올바른 서버로 보내기 위해 DNS 를 살펴봄</li>
<li>DNS 는 도메인 주소를 IP 주소로 맞춰줌</li>
</ul>
</blockquote>
</li>
<li>
<p>서버에 웹사이트 사본 요청 HTTP 메세지 전송</p>
</li>
<li>
<p>서버는 클라이언트에 200 OK 메세지를 보낸 뒤, 웹사이트 파일들을 데이터 패킷들을 통해 브라우저에 전송</p>
<ul>
<li>효율성을 위해 패킷으로 나눠서 전송</li>
</ul>
</li>
<li>
<p>클라이언트가 데이터를 조립 후 유저에게 보여줌</p>
</li>
</ol>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹페이지-웹사이트-웹서버의-차이">웹페이지, 웹사이트, 웹서버의 차이<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%9B%B9%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4" class="hash-link" aria-label="Direct link to 웹페이지, 웹사이트, 웹서버의 차이" title="Direct link to 웹페이지, 웹사이트, 웹서버의 차이">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹페이지">웹페이지<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80" class="hash-link" aria-label="Direct link to 웹페이지" title="Direct link to 웹페이지">​</a></h3>
<ul>
<li>웹 브라우저에서 보여주는 하나의 문서</li>
<li>HTML 언어로 쓰여짐</li>
<li>다양한 자원을 포함<!-- -->
<ul>
<li>style information, scripts (인터랙션), media …</li>
</ul>
</li>
<li>하나의 유일한 주소를 가짐 (ex. <em><a href="https://web.chlngers.com/challenges/4242" target="_blank" rel="noopener noreferrer">https://web.chlngers.com/challenges/4242</a></em>)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹사이트">웹사이트<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8" class="hash-link" aria-label="Direct link to 웹사이트" title="Direct link to 웹사이트">​</a></h3>
<ul>
<li>같은 도메인들을 가진 웹페이지들의 모음 또는 그룹 (ex. <em><a href="https://web.chlngers.com/" target="_blank" rel="noopener noreferrer">https://web.chlngers.com</a></em>)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버">웹서버<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84" class="hash-link" aria-label="Direct link to 웹서버" title="Direct link to 웹서버">​</a></h3>
<ul>
<li>인터넷에 하나 이상의 웹사이트를 <code>**호스팅**</code>하는 컴퓨터<!-- -->
<blockquote>
<p><code>**host**</code></p>
<ul>
<li>store&nbsp;(a&nbsp;website&nbsp;or&nbsp;other&nbsp;data)&nbsp;on&nbsp;a&nbsp;server&nbsp;or&nbsp;other&nbsp;computer&nbsp;so&nbsp;that&nbsp;it&nbsp;can&nbsp;be&nbsp;accessed&nbsp;over&nbsp;the&nbsp;internet</li>
</ul>
</blockquote>
</li>
<li>유저가 보내는 request 에 대해서 웹 서버는 본인이 호스팅하고 있는 웹사이트에서 유저의 브라우저로 웹 페이지를 보냄</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버-1">웹서버<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84-1" class="hash-link" aria-label="Direct link to 웹서버" title="Direct link to 웹서버">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버란">웹서버란<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84%EB%9E%80" class="hash-link" aria-label="Direct link to 웹서버란" title="Direct link to 웹서버란">​</a></h3>
<ul>
<li>웹서버는 하나의 컴퓨터 (하드웨어+소프트웨어)<!-- -->
<ul>
<li>하드웨어<!-- -->
<ul>
<li>소프트웨어 저장</li>
<li>웹사이트의 파일들 ( =호스팅 파일들) 저장 (html , css, javascript, assets)<!-- -->
<ul>
<li><strong><code>html</code></strong> Hypertext Markup Language</li>
</ul>
</li>
<li>이런 자원을 로컬 컴퓨터에 저장할 수도 있지만, 웹서버에 저장하는 것이 더 편리<!-- -->
<ul>
<li>이러한 웹서버는 항상 실행중이고, 항상 인터넷에 연결되어있고, 항상 같은 ip 주소를 가지고 있고, 유지보수가 되어야하기 때문에, 보통 웹 호스팅 솔루션에 이러한 서버를 구축하고, 파일을 업로드 하는 것</li>
<li>라즈베리 파이로 웹서버 구축하기 <a href="https://www.robotstory.co.kr/raspberry/?vid=40" target="_blank" rel="noopener noreferrer">https://www.robotstory.co.kr/raspberry/?vid=40</a></li>
</ul>
</li>
</ul>
</li>
<li>소프트웨어<!-- -->
<ul>
<li>웹 사용자가 파일들에 접근하는 것을 관리하는 <strong><code>HTTP 서버</code></strong>
<ul>
<li><strong><code>HTTP 서버</code></strong>: url, http를 이해하는 서버</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>클라이언트가 http 를 통해 파일을 요청했을때, http 서버가 저장된 파일을 다시 클라이언트에 보내줌</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="정적-웹서버와-동적-웹서버">정적 웹서버와 동적 웹서버<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%A0%95%EC%A0%81-%EC%9B%B9%EC%84%9C%EB%B2%84%EC%99%80-%EB%8F%99%EC%A0%81-%EC%9B%B9%EC%84%9C%EB%B2%84" class="hash-link" aria-label="Direct link to 정적 웹서버와 동적 웹서버" title="Direct link to 정적 웹서버와 동적 웹서버">​</a></h3>
<ul>
<li>정적 웹서버 (served-as-is)<!-- -->
<ul>
<li>HTTP 서버(소프트웨어)가 있는 컴퓨터(하드웨어)</li>
</ul>
</li>
<li>동적 웹서버<!-- -->
<ul>
<li>정적 웹서버 + <strong><code>웹 애플리케이션 서버</code></strong> + 데이터 베이스 + …<!-- -->
<ul>
<li><code>**웹 애플리케이션 서버**</code> (Web Application Server)<!-- -->
<ul>
<li>http 서버로 저장된 파일을 전송하기 전, 애플리케이션 서버가 파일을 업데이트</li>
<li>ex. 웹서버 하드웨어에 저장된 html 템플릿에 애플리케이션 서버가 데이터베이스의 데이터를 채운 뒤 Http 서버로 전송</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버의-기능-정리">웹서버의 기능 정리<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%8A%A5-%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 웹서버의 기능 정리" title="Direct link to 웹서버의 기능 정리">​</a></h3>
<ul>
<li>다음 두가지 동작 중 적절한 선택 수행<!-- -->
<ul>
<li>기능 1<!-- -->
<ul>
<li>정적 컨텐츠 제공</li>
<li>WAS 를 거치지 않고 바로 자원을 제공</li>
</ul>
</li>
<li>기능 2<!-- -->
<ul>
<li>동적 컨텐츠 제공을 위해 클라이언트에서 받은 요청을 WAS 에 전달하고, WAS 가 처리한 결과를 클라이언트에 전달</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버의-종류">웹서버의 종류<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84%EC%9D%98-%EC%A2%85%EB%A5%98" class="hash-link" aria-label="Direct link to 웹서버의 종류" title="Direct link to 웹서버의 종류">​</a></h3>
<ul>
<li>Apache HTTP Server 아파치<!-- -->
<ul>
<li>MPM (Multi Process Module)<!-- -->
<ul>
<li>클라이언트로부터 요청이 들어올 때마다 새로운 프로세스 or 쓰레드 생성</li>
<li>리소스 소모가 심한 문제</li>
</ul>
</li>
</ul>
</li>
<li>Nginx<!-- -->
<ul>
<li>리버스 프록시, <strong>로드 밸런싱</strong>, 메일 프록시, HTTP 캐시 기능이 포함된 오픈 소스 웹 서버</li>
<li>전체 글로벌 웹 사이트 중 38% 가까이에서, 그리고 방문자 수 백만 돌파 사이트의 25% 이상에서 서비스 또는 프록싱</li>
<li>비동기 요청 처리 (≠ Apache)<!-- -->
<ul>
<li>요청당 프로세스/쓰레드를 생성하지 않고, 하나의 Worker process 가 여러 요청을 처리</li>
</ul>
</li>
</ul>
</li>
<li>IIS (Microsoft)<!-- -->
<ul>
<li>Windows 전용 웹서버</li>
</ul>
</li>
</ul>
<h1>WAS Web Application Server</h1>
<p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled-a4597d9dd692495319d141c369da477b.png" width="3233" height="1262" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="어플리케이션-서버란">어플리케이션 서버란?<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84%EB%9E%80" class="hash-link" aria-label="Direct link to 어플리케이션 서버란?" title="Direct link to 어플리케이션 서버란?">​</a></h2>
<ul>
<li>Application Sever</li>
<li>클라이언트와 서버의 비즈니스 로직 간 상호작용을 통해 동적 컨텐츠 (트랜잭션 결과, 의사결정 지원, 실시간 분석) 등 지원</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="was">WAS<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#was" class="hash-link" aria-label="Direct link to WAS" title="Direct link to WAS">​</a></h2>
<ul>
<li>DB 조회, 다양한 로직 처리를 요구하는 동적 컨텐츠 제공을 위해 만들어진 애플리케이션 서버</li>
<li>HTTP 를 통해 컴퓨터나 장치에서 애플리케이션을 수행해주는 미들웨어 (소프트웨어 엔진)<!-- -->
<ul>
<li>클라이언트와 DBMS 사이에서 동작하면서, 대부분의 로직을 수행해줌</li>
<li>이를 통해 클라이언트는 입력과 출력만 담당</li>
</ul>
</li>
<li>웹 어플리케이션 서버 = <strong><code>웹 컨테이너</code></strong> Web Container = <strong><code>서블릿 컨테이너</code></strong> Servlet Container</li>
<li>웹서버가 하는 일 역시도 함께 수행할 수 있음</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="was--web-server--web-container">WAS = Web Server + Web Container<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#was--web-server--web-container" class="hash-link" aria-label="Direct link to WAS = Web Server + Web Container" title="Direct link to WAS = Web Server + Web Container">​</a></h3>
<ul>
<li>현재는 WAS 가 가지고 있는 Web Server 도 정적인 컨텐츠를 처리하는데 성능상 큰 차이 없음</li>
<li>점점 더 많은 수의 애플리케이션 서버가 웹 서버 기능을 통합함은 물론, HTTP를 기본 프로토콜로 사용하고 웹 서버와의 인터페이스를 위해 기타 프로토콜 (예: CGI 및 CGI 변형)을 지원</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹서버-와-was-를-구분하는-이유">웹서버 와 WAS 를 구분하는 이유<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9%EC%84%9C%EB%B2%84-%EC%99%80-was-%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="Direct link to 웹서버 와 WAS 를 구분하는 이유" title="Direct link to 웹서버 와 WAS 를 구분하는 이유">​</a></h3>
<ul>
<li>
<p><strong>웹사이트는 웹서버와 WAS 를 둘 다 두는 것이 필수는 아님</strong></p>
<ul>
<li>클라이언트 -&gt; <code>웹서버</code> -&gt; DB<!-- -->
<ul>
<li>PHP, Perl, Python 등은 CGI 를 구현해놓아서, WAS 없이 Apache 나 Nginx 만을 통해서 동적 요청 처리가 가능함<!-- -->
<ul>
<li>ex. Apache 에 PHP 를 설치한 경우<!-- -->
<ul>
<li>요청이 Apache 로 오면, Apache 가 HTTP 헤더를 분석하고 파싱해서 PHP 로 파라미터를 넘기고, PHP는 파라미터를 받아 HTML 문서를 만들어서 Apache에 전달</li>
</ul>
</li>
</ul>
</li>
<li>⚠️&nbsp;여전히 CGI 는 효율이 떨어지기 때문에 큰 웹서비스에는 적합하지 않음</li>
<li>⚠️&nbsp;사용자가 원하는 요청에 대한 모든 결과값을 미리 만들어 놓고 서비스 해야함</li>
<li>⚠️&nbsp;자원 부족 문제</li>
</ul>
</li>
<li>클라이언트 -&gt; <code>WAS</code> -&gt; DB
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%201-70b34424e2d3aca1a6a91cc040304115.png" width="1917" height="607" class="img_ev3q">
<ul>
<li>⚠️&nbsp;기본적으로는 동적 컨텐츠를 제공하기 위해 존재하는 WAS는 DB 조회등 비즈니스 로직을 처리하는 데 부하가 많이 쓰이고 있기 때문에, 단순 정적 컨텐츠까지 처리하면 부하가 심해짐</li>
<li>⚠️&nbsp;페이지 노출 시간 길어짐</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>웹서버 / WAS 구분 구조</strong></p>
<ul>
<li>클라이언트 -&gt; <code>웹서버</code> -&gt; <code>WAS</code> -&gt; DB
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%202-ea637e0c636838767fa86019d218c066.png" width="2843" height="850" class="img_ev3q">
<ul>
<li>클라이언트가 웹서버에 HTTP 요청</li>
<li>WAS 가 관련 Servlet 을 메모리에 올리고, web.xml 을 참조해 해당 Servlet 에 대한 thread 를 생성</li>
<li>WAS이 HttpServletRequest, HttpServletResponse 를 Sublet 에 요청</li>
<li>Thread 가 Servlet 의 service() 를 호출 ⇒ 요청에 맞는 메서드 호출</li>
<li>호출된 메서드는 인자에 맞게 동적 페이지를 생성해서 다시 WAS 에 전달</li>
<li>WAS 는 들어온 response 객체를 HTTP Response 형태로 바꿔 Web Service 에 전달</li>
<li>생성된 Thread 종료, HttpServletRequest와 HttpServletResponse 객체 제거</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>구분의 장점</strong></p>
<ul>
<li>기능 분리 ⇒ 서버 부하 방지<!-- -->
<ul>
<li>정적 컨텐츠는 Web Server 에서 WAS 없이 빠르게 전송</li>
<li>동적 컨텐츠만 WAS 가 처리</li>
</ul>
</li>
<li>물리적 분리 ⇒ 보안 강화<!-- -->
<ul>
<li>WAS 의 SSL에 대한 암복호화 처리에 Web Server를 사용</li>
</ul>
</li>
<li>여러 WAS 를 연결할 수 있음<!-- -->
<ul>
<li><strong>로드밸런싱</strong> 을 위해 Web Server 사용</li>
<li>장애 관리에 용이<!-- -->
<ul>
<li>ex. WAS 에 오류가 난 경우 앞단의 Web Server 에서 해당 WAS 를 이용하지 못하게 한 후 WAS 를 재시작</li>
</ul>
</li>
<li>여러 웹 어플리케이션 서비스가 가능<!-- -->
<ul>
<li>하나의 서버에서 PHP Application, Java Application 을 함께 사용하는 경우</li>
<li>앞단에 Web Server 를 두고, 플러그인 형식으로 여러 WAS 를 설정해두면 분산 처리에 용이</li>
</ul>
</li>
<li>Web Server 에 접근 허용 IP 관리, 세션 관리 등을 맡길 수 있음</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="was의-예">WAS의 예<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#was%EC%9D%98-%EC%98%88" class="hash-link" aria-label="Direct link to WAS의 예" title="Direct link to WAS의 예">​</a></h3>
<ul>
<li>Apache Tomcat<!-- -->
<ul>
<li>Java 서블릿을 실행하고, JSP(JavaServer Page) 코드를 포함한 웹 페이지를 렌더링 및 제공하고, Java EE(Java Enterprise Edition) 애플리케이션을 서비스</li>
<li>Java Servlet 의 경우 CGI 를 사용하지 않아서 꼭 JAVA + Tomcat + Apache 의 형태로 쓰이는 경우가 많음</li>
</ul>
</li>
<li>Glassfish</li>
<li>JBoss, Jeus, Web Sphere 등</li>
</ul>
<h1>로드밸런싱</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="로드-밸런싱-load-balancing">로드 밸런싱 Load Balancing<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%8B%B1-load-balancing" class="hash-link" aria-label="Direct link to 로드 밸런싱 Load Balancing" title="Direct link to 로드 밸런싱 Load Balancing">​</a></h2>
<ul>
<li>서버에 들어오는 Inbound Traffic 을 다양한 서버에 나누어 처리해 하나의 서버에 부하가 집중되지 않도록 함</li>
<li>서비스 규모가 커져서 기존의 서버가 부하를 감당할 수 없을 때 해결법<!-- -->
<ol>
<li>Scale-up (기존 서버의 성능 확장)</li>
<li>Scale-out (기존 서버와 동일하거나 낮은 서버를 증설)</li>
</ol>
<ul>
<li>Scale-out 방식의 경우 로드밸런싱을 통해 트래픽을 균등하게 분배해 주어야 함</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="로드밸런서의-기본-기능">로드밸런서의 기본 기능<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B8%B0%EB%8A%A5" class="hash-link" aria-label="Direct link to 로드밸런서의 기본 기능" title="Direct link to 로드밸런서의 기본 기능">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="health-check">Health Check<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#health-check" class="hash-link" aria-label="Direct link to Health Check" title="Direct link to Health Check">​</a></h3>
<ul>
<li>로드밸런서에 연결된 다양한 서버 노드들에 대해 주기적으로 체크해서 서버 장애 여부 판단</li>
<li>어떠한 서버에 장애가 생겼을 경우 로드 밸런서에서 다른 서버로 요청을 보내면 되므로 fail-over 가능</li>
<li>TCP/UDP 분석 → Firewall 역할도 수행</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tunneling">Tunneling<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#tunneling" class="hash-link" aria-label="Direct link to Tunneling" title="Direct link to Tunneling">​</a></h3>
<ul>
<li>클라이언트와 서버 중간에 위치하면서, 데이터를 캡슐화해서 요청이 연결된 노드만 캡슐화된 패킷을 해제할 수 있도록 함</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nat-network-address-translation">NAT (Network Address Translation)<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#nat-network-address-translation" class="hash-link" aria-label="Direct link to NAT (Network Address Translation)" title="Direct link to NAT (Network Address Translation)">​</a></h3>
<ul>
<li>IP 주소 변환 기능</li>
<li>원래는 네트워크 계층의 IP 주소에서 IP 헤더의 프로토콜 정보를 보고 UDP 인지 TCP 인지 구분하고, 각각 헤더에 있는 포트 넘버를 이용해 프로세스까지 도착</li>
<li>로드밸런서는 목적지와 수신지의 TCP/UDP 포트를 재기록, 변환해서 트래픽을 주고받을 수 있음</li>
<li>NAT의 종류<!-- -->
<ul>
<li><code>SNAT</code> Source Network Address Translation<!-- -->
<ul>
<li>트래픽이 내부 ⇒ 외부로 나갈때, 내부 사설 IP 주소를 외부 IP 주소로 변환</li>
</ul>
</li>
<li><code>DNAT</code> Destination Network Address Translation<!-- -->
<ul>
<li>트래픽이 외부 ⇒ 내부로 들어올 때, 외부 공인 IP 주소를 내부 사설 IP 로 변환</li>
</ul>
</li>
<li>ex. 공유기</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dsr-direct-server-routing">DSR (Direct Server Routing)<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#dsr-direct-server-routing" class="hash-link" aria-label="Direct link to DSR (Direct Server Routing)" title="Direct link to DSR (Direct Server Routing)">​</a></h3>
<ul>
<li>서버에서 클라이언트로 되돌아갈 때는 목적지를 클라이언트로 설정해, 네트워크 장비나 로드밸런서를 거치지 않음</li>
<li>로드밸런서 부하 down</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="로드밸런싱-기법">로드밸런싱 기법<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EA%B8%B0%EB%B2%95" class="hash-link" aria-label="Direct link to 로드밸런싱 기법" title="Direct link to 로드밸런싱 기법">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l4-로드-밸런서--clb-connection-load-balancer--slb-session-load-balancer">L4 로드 밸런서 = <code>CLB</code> Connection Load Balancer = <code>SLB</code> Session Load Balancer<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#l4-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C--clb-connection-load-balancer--slb-session-load-balancer" class="hash-link" aria-label="Direct link to l4-로드-밸런서--clb-connection-load-balancer--slb-session-load-balancer" title="Direct link to l4-로드-밸런서--clb-connection-load-balancer--slb-session-load-balancer">​</a></h3>
<ul>
<li>ip 주소나 포트번호, MAC 주소, 전송 프로토콜 등에 따라 분산처리</li>
</ul>
<ol>
<li>라운드로빈 방식 <code>Round Robin Method</code>
<ul>
<li>들어온 요청을 순서대로 각 서버에 배정</li>
<li>여러 서버가 동일한 스펙이고, 세션이 오래 지속되지 않는 경우 활용</li>
</ul>
</li>
<li>가중 라운드로빈 방식 <code>Weighted Round Robin Method</code>
<ul>
<li>각 서버에 가중치를 매기고, 요청이 들어왔을 때 가중치가 높은 서버에 우선 배분</li>
<li>서버 스펙이 상이할 때 사용</li>
</ul>
</li>
<li>IP 해시 방식 <code>IP Hash Method</code>
<ul>
<li>클라이언트의 ip 주소를 해싱하고, 특정 서버에 매핑해 요청 처리</li>
<li>해싱을 통해 한 사용자가 항상 동일한 서버에 연결되는 것을 보장</li>
</ul>
</li>
<li>최소 연결 방식 <code>Least Connection Method</code>
<ul>
<li>요청 시점에 가장 적은 연결 상태의 서버에 배분</li>
<li>세션이 자주 길어지거나 트래픽이 일정하지 않은 경우 사용</li>
</ul>
</li>
<li>최소 응답시간 방식 <code>Least Response Time Method</code>
<ul>
<li>서버의 연결 상태 + 응답 시간까지 고려해 트래픽 배분</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l7-로드-밸런서">L7 로드 밸런서<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#l7-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C" class="hash-link" aria-label="Direct link to L7 로드 밸런서" title="Direct link to L7 로드 밸런서">​</a></h3>
<ul>
<li>L4 로드 밸런서의 기능 포함, HTTP 등 어플리케이션 계층의 프로토콜을 바탕으로 분산 처리가 가능</li>
</ul>
<ol>
<li>URL 스위칭 방식 <code>URL Switching</code>
<ul>
<li>특정 하위 url은 특정 서버에서 처리하는 방식</li>
</ul>
</li>
<li>컨텍스트 스위칭 방식 <code>Context Switching</code>
<ul>
<li>클라이언트가 요청한 특정 리소스를 특정 서버로 연결하는 방식</li>
<li>ex. 이미지 파일의 경우 확장자를 참조해 별도 이미지 서버/스토리지로 연결</li>
</ul>
</li>
<li>쿠키 지속성 <code>Persistence with Cookies</code>
<ul>
<li>쿠키 정보를 바탕으로 유저가 연결했던 서버와 동일한 서버에 할당하는 방식</li>
</ul>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹-접속에서의-로드밸런싱">웹 접속에서의 로드밸런싱<a href="https://suekim3028.github.io/blog/web-server-was-loadbalancer#%EC%9B%B9-%EC%A0%91%EC%86%8D%EC%97%90%EC%84%9C%EC%9D%98-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1" class="hash-link" aria-label="Direct link to 웹 접속에서의 로드밸런싱" title="Direct link to 웹 접속에서의 로드밸런싱">​</a></h2>
<ul>
<li>클라이언트가 웹주소를 입력했을 때, DNS 에서 바로 웹서버 주소를 반환하지 않고 로드밸런서의 IP 주소를 반환함</li>
<li>클라이언트가 로드밸런서 IP에 http 요청을 하면, 로드밸런서가 별도 로드밸런싱 방식을 통해 서버에 요청 전송을 하고, 돌아온 응답을 클라이언트에 반환함</li>
<li>로드밸런서 또한 장애가 발생할 수 있기 때문에, 로드밸런서 자체도 이중화 구성 필요</li>
</ul>
<aside><p>💡 <code>**TCP</code>** Transmission Control Protocol 전송 제어 규약</p><ul>
<li>패킷 추적 및 관리</li>
<li>연결형 프로토콜<!-- -->
<ul>
<li>클라이언트와 서버가 연결된 상태에서, 패킷 전송을 위한 논리적 경로 배정</li>
<li>3-Way handshake 를 통한 연결 설정<!-- -->
<ol>
<li>Client -&gt; Server : 내 말 들려?<!-- -->
<ul>
<li><em><code>SYN</code></em> <code>synchronize sequence&nbsp;numbers: 연결 확인을 보내는 무작위 숫자 값</code> 전송 후 <em>SYN_SENT</em> 상태로 대기</li>
</ul>
</li>
<li>Server -&gt; Client : 어 잘 들려! 내 말은 들려?<!-- -->
<ul>
<li><em>SYN_RECEIVED</em> 상태로 변경 후 <code>SYN</code> + <code>ACK</code> _<code>acknowledgements_ : 받은 syn에 1을 더해 잘 받았다는 응답</code> 전송</li>
</ul>
</li>
<li>Client -&gt; Server: 잘 들려!<!-- -->
<ul>
<li><em>ESTABLISHED</em> 상태로 변경 후 <code>ACK</code> 전송</li>
</ul>
</li>
</ol>
</li>
<li>4-Way handshake 를 통한 연결 해제<!-- -->
<ol>
<li>Client -&gt; Server : 나는 다 보냈어! 이제 끊자!<!-- -->
<ul>
<li><code>FIN</code> 전송 후 <em>FIN-WAIT-1</em> 상태로 대기
2-1. Server -&gt; Client : 알겠어! 잠시만~</li>
</ul>
</li>
</ol>
<ul>
<li><em>CLOSE_WAIT</em> 변경 후 <code>ACK</code> 전달 + 해당 포트에 연결되어있는 애플리케이션에 close 요청
3-1. Server -&gt; Client : 나도 끊을게!</li>
<li><em>FIN_WAIT_2</em> 상태로 변경
2-2. close 요청 받은 애플리케이션은 close 후 Client 에 FIN 전달
3-2. client</li>
<li><em>LAST_ACK</em> 상태로 변경</li>
</ul>
<ol>
<li>Client -&gt; Server : 알겠어!<!-- -->
<ul>
<li><code>ACK</code> 전송 후 <em>TIME-WAIT</em> 상태로 변경 ⇒ 일정 시간 이후 close</li>
<li><code>ACK</code> 전송받은 Server 도 close</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>데이터 전송의 순서가 보장됨</li>
<li>연속성보다는 신뢰성이 중요한 전송에서 사용</li>
</ul></aside>
<aside><p>💡 <code>**IP**</code> Internet Protocol</p><ul>
<li>네트워크에 연결되어 있는 모든 컴퓨터에 각각 할당된 주소</li>
<li>기억하기 어렵기 때문에 도메인 이름 을 지정함 (google.com = 173.194.121.32)</li>
<li>데이터의 배달 처리</li>
</ul></aside>
<aside><p>💡 <strong><code>UDP</code></strong> User Datagram Protocol 사용자 데이터그램 규약</p><ul>
<li>데이터 전송 순서 보장 x</li>
<li>데이터 수신 여부 확인 x</li>
<li>신뢰성이 낮지만 속도가 빠르고, 1:1, 1<!-- -->:N<!-- -->, N<!-- -->:N<!-- --> 통신이 모두 가능</li>
</ul></aside>
<aside><p>💡 single-page website</p><ul>
<li>하나의 웹페이지만을 가지고 있는 웹사이트</li>
</ul></aside>
<aside><p>💡 <code>**http**</code> hypertext transfer protocol</p><ul>
<li>말 그대로 hypertext 전송에 대한 약속</li>
<li>textual + stateless</li>
<li>클라→<code>요청</code>→서버, 서버→<code>응답</code>→클라 방향만 허용</li>
<li>클라이언트는 반드시 url 파일 제공</li>
<li>서버는 들어온 요청에 대해선 무조건 응답</li>
</ul></aside>
<aside><p>💡 <code>**web.xml**</code></p><ul>
<li>Web Application 의 Deployment Descriptor (배포 설명자)</li>
<li>모든 web application server 는 하나의 web.xml을 가져야함</li>
<li>애플리케이션에 요청이 들어오면, 요청을 처리 코드에 매핑
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%203-1aa00ed05eff9e20507f8e08d374483b.png" width="477" height="258" class="img_ev3q"></li>
</ul></aside>
<aside><p>💡 <strong><code>SSL</code></strong> Secure Sockets Layer</p><ul>
<li>보안 프로토콜로서, 개인정보 보호, 인증, 무결성을 인터넷 통신에 제공</li>
<li>웹사이트와 브라우저 사이(또는 두 서버 사이)에 전송되는 데이터를 암호화하여 인터넷 연결을 보호하기 위한 표준 기술</li>
<li>이후 표준화 되어 Transport Layer Security(전송 계층 보안) 라는 이름으로 발전함</li>
</ul></aside>
<aside><p>💡 <code>**포워드 프록시**</code> Forward Proxy</p><p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%204-28c71f79e2594547b096991cfb3f5e6d.png" width="786" height="655" class="img_ev3q"></p><ul>
<li>클라이언트를 숨겨주는 역할</li>
<li>클라이언트가 서버에 접속할 때, 내부망에 있는 포워드 프록시가 요청을 받고, 서버에 연결한 뒤 결과를 전달해줌</li>
</ul></aside>
<aside><p>💡 <code>**리버스 프록시**</code> Reverse Proxy</p><p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%205-3880ce1b5fa642d748698d5a095e4bb3.png" width="772" height="483" class="img_ev3q"></p><ul>
<li>서버를 숨겨주는 역할</li>
<li>실제 내부 WAS 서버를 클라이언트가 바로 접속하지 않고, 한 대 이상의 대리 서버가 실제 서버에 접속해 응답을 받아 대신 반환</li>
<li>클라이언트에서는 실제 서버를 알 수 없음</li>
<li>nginx 가 대리 서버의 역할</li>
</ul></aside>
<aside><p>💡 <strong><code>컨테이너</code></strong> Container</p><ul>
<li>JSP, Servlet을 실행시킬 수 있는 소프트웨어</li>
</ul></aside>
<aside><p>💡 <strong><code>서블릿</code></strong> Servlet</p><ul>
<li>WAS 위에서 구동되는 Java 프로그램</li>
</ul></aside>
<aside><p>💡 <strong><code>CGI</code></strong> Common Gateway Interface</p><ul>
<li>웹서버와 외부 프로그램 사이에서 정보를 주고받는 방법이나 규약</li>
</ul></aside>
<p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%206-71d07b94c7a89a473e252311c51803bb.png" width="620" height="346" class="img_ev3q"></p>
<aside><p>💡 공유기의 NAT</p><ul>
<li>ISP 업체가 1가구 당 1IP 주소를 배정해주면, 여러 컴퓨터가 공유기를 통해 해당 IP 에 접속할 수 있도록 함</li>
<li>공인 IP 주소 (111.222.333.444)가 있으면, 각 컴퓨터는 해당 공인 IP가 공유기를 통해 NAT 이 이루어져 만들어진 가상의 IP 주소들을 가짐 (192.168.0.92)</li>
<li>컴퓨터에서 웹페이지를 요청하면, 공유기를 통해 다시 공인 IP 주소로 NAT 되어 웹서버에는 공인 IP에서 온 요청이라고 인식 - 각각의 컴퓨터는 공인 ip만으로는 구분할 수 없기 때문에, port 로 구분</li>
</ul></aside>
<aside><p>💡 OSI 7 계층</p><table><thead><tr><th>7</th><th>응용 계층(Application Layer)</th><th>Data</th><th>텔넷(Telnet), 구글 크롬, 이메일, 데이터베이스 관리</th><th>HTTP, SMTP, SSH, FTP, Telnet, DNS, modbus, SIP, AFP, APPC, MAP</th><th></th></tr></thead><tbody><tr><td>6</td><td>표현 계층(Presentation Layer)</td><td>Data</td><td>인코딩, 디코딩, 암호화, 복호화</td><td>ASCII, MPEG, JPEG, MIDI, EBCDIC, XDR, AFP, PAP</td><td></td></tr><tr><td>5</td><td>세션 계층(Session Layer)</td><td>Data</td><td></td><td>NetBIOS, SAP, SDP, PIPO, SSL, TLS, NWLink, ASP, ADSP, ZIP, DLC</td><td></td></tr><tr><td>4</td><td>전송 계층(Transport Layer)</td><td>TCP-Segment, UDP-datagram</td><td>특정 방화벽 및 프록시 서버</td><td>TCP, UDP, SPX, SCTP, NetBEUI, RTP, ATP, NBP, AEP, OSPF</td><td>게이트웨이</td></tr><tr><td>3</td><td>네트워크 계층(Network Layer)</td><td>Packet</td><td>라우터</td><td>IP, IPX, IPsec, ICMP, ARP, NetBEUI, RIP, BGP, DDP, PLP</td><td>라우터</td></tr><tr><td>2</td><td>데이터링크 계층(DataLink Layer)</td><td>Frame</td><td>MAC 주소, 브리지 및 스위치</td><td>Ethernet, Token Ring, AppleTalk, PPP, ATM, MAC, HDLC, FDDI, LLC, ALOHA</td><td>브릿지,스위치</td></tr><tr><td>1</td><td>물리 계층(Physical Layer)</td><td>Bit</td><td>전압, 허브, 네트워크 어댑터, 중계기 및 케이블 사양, 신호 변경(디지털,아날로그)</td><td>10BASE-T, 100BASE-TX, ISDN, wired, wireless, RS-232, DSL, Twinax</td><td>허브,리피터</td></tr></tbody></table></aside>]]></content>
        <author>
            <name>Soobeen Kim</name>
            <uri>https://github.com/suekim3028</uri>
        </author>
        <category label="web" term="web"/>
        <category label="webserver" term="webserver"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Machine Learning on Web]]></title>
        <id>https://suekim3028.github.io/blog/ml-on-web</id>
        <link href="https://suekim3028.github.io/blog/ml-on-web"/>
        <updated>2024-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.]]></summary>
        <content type="html"><![CDATA[<p><code>이 글은 블로그용이 아닌 세션 진행 자료로 먼저 활용된 자료로, 아직 정리되지 않은 임시글입니다.</code></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹에서의-머신러닝">웹에서의 머신러닝<a href="https://suekim3028.github.io/blog/ml-on-web#%EC%9B%B9%EC%97%90%EC%84%9C%EC%9D%98-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D" class="hash-link" aria-label="Direct link to 웹에서의 머신러닝" title="Direct link to 웹에서의 머신러닝">​</a></h3>
<ul>
<li>PWA (Progressive Web Apps) 개념의 등장<!-- -->
<ul>
<li>앱 설치 등의 귀찮음 없이도 native app 의 이점을 제공할 수 있도록 최신 API등을 활용해 제작한 웹앱</li>
</ul>
<img decoding="async" loading="lazy" alt="https://web.dev/articles/what-are-pwas?hl=ko" src="https://suekim3028.github.io/assets/images/Untitled-76f64ad5a194c209644443d479c5dcb2.png" width="402" height="408" class="img_ev3q"></li>
</ul>
<blockquote>
<h6 class="anchor anchorWithStickyNavbar_LWe7" id="httpswebdevarticleswhat-are-pwashlko"><a href="https://web.dev/articles/what-are-pwas?hl=ko" target="_blank" rel="noopener noreferrer">https://web.dev/articles/what-are-pwas?hl=ko</a><a href="https://suekim3028.github.io/blog/ml-on-web#httpswebdevarticleswhat-are-pwashlko" class="hash-link" aria-label="Direct link to httpswebdevarticleswhat-are-pwashlko" title="Direct link to httpswebdevarticleswhat-are-pwashlko">​</a></h6>
</blockquote>
<ul>
<li>웹 개발에서 점점 보편화되고 있는 머신러닝 → 웹사이트와 웹앱 등에서 통합되고 있음</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹에서-머신러닝-모델을-돌리기-위해서-필요한-것은-무엇일까">웹에서 머신러닝 모델을 돌리기 위해서 필요한 것은 무엇일까?<a href="https://suekim3028.github.io/blog/ml-on-web#%EC%9B%B9%EC%97%90%EC%84%9C-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EB%8F%8C%EB%A6%AC%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C" class="hash-link" aria-label="Direct link to 웹에서 머신러닝 모델을 돌리기 위해서 필요한 것은 무엇일까?" title="Direct link to 웹에서 머신러닝 모델을 돌리기 위해서 필요한 것은 무엇일까?">​</a></h3>
<ul>
<li>어찌 됐든 브라우저에서 돌아가는 건 html과 js<!-- -->
<ul>
<li>js 상에서 복잡한 행렬 연산 등이 가능해야 함</li>
</ul>
</li>
<li>빠른 속력<!-- -->
<ul>
<li>GPU를 사용할 수 있으면 좋겠다!</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="web-gl-web-graphics-library">Web GL (Web Graphics Library)<a href="https://suekim3028.github.io/blog/ml-on-web#web-gl-web-graphics-library" class="hash-link" aria-label="Direct link to Web GL (Web Graphics Library)" title="Direct link to Web GL (Web Graphics Library)">​</a></h3>
<p><a href="https://developer.mozilla.org/ko/docs/Web/API/WebGL_API" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/API/WebGL_API</a></p>
<ul>
<li>높은 성능을 요구하는 반응형 3D/2D 그래픽을 그릴 수 있도록 Javascript가 제공하는 Web API (open web standard)<!-- -->
<ul>
<li><a href="https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample8/" target="_blank" rel="noopener noreferrer">https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample8/</a></li>
</ul>
</li>
<li>다른 그래픽 관련 플러그인 없이 그래픽 렌더링이 가능하게 함</li>
<li>OpenGL ES 2.0 기반<!-- -->
<ul>
<li>Web GL2의 경우 OpenGL ES 3.0에 기반함</li>
<li>OpenGL<!-- -->
<ul>
<li>1992년 초에 컴퓨터 그래픽을 하드웨어 가속으로 처리(렌더링)함과 동시에, 여러 분야에서 사용될 수 있도록 하는 범용성을 보장하기 위해 발표된 2D, 3D 그래픽 API의 규격서</li>
</ul>
</li>
</ul>
</li>
<li>대부분의 최신 브라우저와 호환</li>
<li><code>&lt;canvas /&gt;</code> tag (webgl context를 가지고 있음)을 배경으로 활용해 javascript 에서 스크린에 webgl을 활용한 그래픽을 그릴 수 있도록 함<!-- -->
<ul>
<li>three.js 등 라이브러리가 WebGL API를 기반으로 만들어진 library</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="shader">shader<a href="https://suekim3028.github.io/blog/ml-on-web#shader" class="hash-link" aria-label="Direct link to shader" title="Direct link to shader">​</a></h3>
<ul>
<li>GLSL(OpenGL ES Shading Language)로 쓰인 프로그램</li>
<li>어떠한 모양을 이루는 vertex들에 대한 정보를 가지고 스크린 위 어떤 픽셀에 어떤 색상을 그려야하는지 생성하는 프로그램</li>
<li>2개의 shader functions<!-- -->
<ul>
<li>vertex shader<!-- -->
<ul>
<li>어떠한 모양이 그려질 때마다 모든 vertex에 대해 실행되는 함수</li>
<li>어떠한 변화에 대해서 해당 vertex의 위치 등을 계산</li>
</ul>
</li>
<li>fragment shader<!-- -->
<ul>
<li>어떠한 모양이 그려질 때마다 해당 모양이 그려진 pixel 별로 실행되는 함수</li>
<li>vertex shader에서 계산된 값들을 공유받아 색상 등을 만들어 냄
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%201-d8bd9e777bc6c90261af6f1a89bbb19c.png" width="1120" height="543" class="img_ev3q"></li>
</ul>
</li>
</ul>
</li>
<li>javascript 내에서 이 프로그램을 string 형식으로 써서 WebGL 에게 넘겨주면 GPU에서 구동이 되는 형식</li>
<li>Machine Learning에서 필요한 계산을 할 수 있는 이유!</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="web-gl-을-이용한-demo">Web GL 을 이용한 Demo<a href="https://suekim3028.github.io/blog/ml-on-web#web-gl-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-demo" class="hash-link" aria-label="Direct link to Web GL 을 이용한 Demo" title="Direct link to Web GL 을 이용한 Demo">​</a></h3>
<p><a href="https://erkaman.github.io/regl-cnn/src/demo.html" target="_blank" rel="noopener noreferrer">https://erkaman.github.io/regl-cnn/src/demo.html</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webgl로-머신러닝-optimization">WebGL로 머신러닝 Optimization<a href="https://suekim3028.github.io/blog/ml-on-web#webgl%EB%A1%9C-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-optimization" class="hash-link" aria-label="Direct link to WebGL로 머신러닝 Optimization" title="Direct link to WebGL로 머신러닝 Optimization">​</a></h3>
<ul>
<li>What Happens in GPU stays in GPU<!-- -->
<ul>
<li>gl.readPixels(), canvas.toDataURL() 등 GPU의 값을 읽어와서 CPU 상에서 구동되는 js 등에서 원하는 값을 가져오려고 하면 CPU와 GPU간의 sync 맞추는데 시간 너무 오래걸림</li>
<li>GPU 상에서 계산되는 texture를 표현하는 Float/Half Float 값을 읽을 때, gl.readPixels()가 아닌 gl_FragColor 를 사용하여 RGBA channel로 인코딩하는 등, GPU 내에서의 방법으로 모든 계산이 이루어지도록 해야함
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%202-7782a7fc0c869f69ee6c88f8134aa8f3.png" width="511" height="497" class="img_ev3q"></li>
</ul>
</li>
<li>계산 등에서 나올수 있는 값이 GL 내에서 표현할 수 있는 값인지 조심<!-- -->
<ul>
<li>GL 내에서 사용되는 타입<!-- -->
<ul>
<li>FLOAT (32 bits)</li>
<li>HALF_FLOAT (16 bits) → enough for deep learning (경험적으로 최소 11 bits 정도 사용)</li>
<li>UNSIGNED_BYTE (8 bits)</li>
</ul>
</li>
<li>exp 연산 등을 하게 되면 쉽게 Fmax(float 으로 표현될 수 있는 수) 를 넘어갈 수 있기 때문에 지양</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webgl-을-이용한-ml관련-library">WebGL 을 이용한 ML관련 library<a href="https://suekim3028.github.io/blog/ml-on-web#webgl-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-ml%EA%B4%80%EB%A0%A8-library" class="hash-link" aria-label="Direct link to WebGL 을 이용한 ML관련 library" title="Direct link to WebGL 을 이용한 ML관련 library">​</a></h3>
<ul>
<li>TensorFire<!-- -->
<ul>
<li>2017년에 마지막 커밋….</li>
<li><a href="https://tenso.rs/demos/fast-neural-style/" target="_blank" rel="noopener noreferrer">https://tenso.rs/demos/fast-neural-style/</a></li>
<li>이전 라이브러리들보다 100배 빠르게 모델 구동 가능<!-- -->
<ul>
<li>ResNet-152를 활용해 사진 스타일 바꾸거나, SqueezeNet을 활용해 webcam 으로 들어오는 비디오에 대한 실시간 object detection 등 가능</li>
</ul>
</li>
<li>동작 방식<!-- -->
<ul>
<li>low-level 에서는 GLSL 을 이용해 WebGL 로 4D tensor에 대한 동작을 할 수 있는 WebGL shader를 만듦 (이게 이전의 머신러닝 관련 라이브러리들과 다른 점)</li>
<li>high-level에서는 Keras나 TensorFlow로 학습된 모델을 임포트할 수 있도록 함</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%203-79625eff567ffc92ec8c6b74b95be2fe.png" width="824" height="852" class="img_ev3q"></p>
<ul>
<li>tensorflow.js<!-- -->
<ul>
<li>Python 으로 작성된 TensorFlow 라이브러리 기반으로 동일한 세트를 JS를 활용해 재현하여 JS 가 실행되는 모든 환경에서 실행될 수 있도록 함</li>
<li>백엔드를 cpu, node, wasm 등에서 고를 수 있는데 제일 추천하는 것이 webgl<!-- -->
<ul>
<li>텐서는 WebGL 텍스처로 저장되고 수학 연산은 WebGL 셰이더에서 구현</li>
<li>실제로 webgl이 제일 빠름
<img decoding="async" loading="lazy" alt="https://www.w3.org/2020/06/machine-learning-workshop/talks/a_proposed_web_standard_to_load_and_run_ml_models_on_the_web.html" src="https://suekim3028.github.io/assets/images/Untitled%204-177c04034b4839d1d3c621ba9d4ca28e.png" width="706" height="392" class="img_ev3q">
<a href="https://www.w3.org/2020/06/machine-learning-workshop/talks/a_proposed_web_standard_to_load_and_run_ml_models_on_the_web.html" target="_blank" rel="noopener noreferrer">https://www.w3.org/2020/06/machine-learning-workshop/talks/a_proposed_web_standard_to_load_and_run_ml_models_on_the_web.html</a></li>
</ul>
</li>
<li>백엔드를 node로 설정한 뒤 가능한 경우 CUDA를 활용한 가속 역시 가능</li>
</ul>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Generate dummy data.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">randomNormal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">784</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> labels </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">randomUniform</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">onBatchEnd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">batch</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> logs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Accuracy"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> logs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">acc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Train for 5 epochs with batch size of 32.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">fit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> labels</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">epochs</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">batchSize</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">callbacks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> onBatchEnd </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Final accuracy"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">history</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">acc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Predict 3 random samples.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> prediction </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">predict</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">randomNormal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">784</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prediction</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>TensorFlow.js 의 Layers API 는 Keras와 최대한 유사하게 만들어져 Keras 경험이 있는 사용자가 마이그레이션 하기 편하도록 함<!-- -->
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># Python:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> keras</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Build and compile model.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> keras</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Sequential</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">keras</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">layers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Dense</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">units</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> input_shape</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">compile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">optimizer</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'sgd'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> loss</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'mean_squared_error'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Generate some synthetic data for training.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ys </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Train model with fit().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">xs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ys</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> epochs</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Run inference with predict().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">np</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// JavaScript:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports operator" style="color:#393A34">*</span><span class="token imports"> </span><span class="token imports keyword module" style="color:#00009f">as</span><span class="token imports"> tf</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@tensorlowjs/tfjs"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Build and compile model.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> model </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sequential</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">layers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">dense</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">units</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">inputShape</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">compile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">optimizer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"sgd"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">loss</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"meanSquaredError"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Generate some synthetic data for training.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> xs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">tensor2d</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ys </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">tensor2d</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Train model with fit().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">fit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">xs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ys</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">epochs</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Run inference with predict().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">model</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">predict</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">tensor2d</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>보안 내에서 구동되도록 설계되었다고 함</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webgpu">WebGPU<a href="https://suekim3028.github.io/blog/ml-on-web#webgpu" class="hash-link" aria-label="Direct link to WebGPU" title="Direct link to WebGPU">​</a></h3>
<ul>
<li>2017년부터 개발되고 있는 그래픽 API (개발 초기 단계)</li>
<li>WebGL 에 비교했을 때 머신러닝 컴퓨테이션 역시 고려하고 사용했기 때문에 성능이 더 좋을 것으로 예상
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%205-7b1aef2effe6e0658a687f905621da11.png" width="761" height="915" class="img_ev3q"></li>
<li>web-based game 관련 개발의 경우 WebGPU가 우세 (성능 측면)</li>
<li>AR/VR 콘텐츠 관련 개발의 경우 WebGL이 우세 (html과의 호환성 등)</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="웹표준에서-ml-관련-api를-포함하려는-움직임">웹표준에서 ML 관련 API를 포함하려는 움직임<a href="https://suekim3028.github.io/blog/ml-on-web#%EC%9B%B9%ED%91%9C%EC%A4%80%EC%97%90%EC%84%9C-ml-%EA%B4%80%EB%A0%A8-api%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EB%A0%A4%EB%8A%94-%EC%9B%80%EC%A7%81%EC%9E%84" class="hash-link" aria-label="Direct link to 웹표준에서 ML 관련 API를 포함하려는 움직임" title="Direct link to 웹표준에서 ML 관련 API를 포함하려는 움직임">​</a></h3>
<ul>
<li>Web NN API (Web Neural Network API)<!-- -->
<ul>
<li><a href="https://www.w3.org/TR/webnn/#intro" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/webnn/#intro</a>
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%206-4f7f10e9ede51123702d395732c2b7f6.png" width="615" height="334" class="img_ev3q"></li>
<li>web 표준 api로 등록 추천 이전인 candidate recommendation 상태
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%207-6004f91c6019405545a5cfe7e821ddb4.png" width="404" height="622" class="img_ev3q"></li>
</ul>
</li>
<li>Model Loader API<!-- -->
<ul>
<li>custom 하여 이미 pre-trained 된 모델을 불러올 수 있는 API</li>
<li>W3C 워크샵에서 proposal 된 정도인 듯..? (Google PM이 propose)</li>
<li>WebAssembly나 WebGL 등은 ML에 특화되어 있지 않기 때문에 더 빠르게 동작할 수 있는 workload가 필요</li>
<li>관련 구글 재직자들 옮기면서 2022년 말에 중지된 프로젝트</li>
<li><a href="https://amber-hilarious-wire.glitch.me/" target="_blank" rel="noopener noreferrer">https://amber-hilarious-wire.glitch.me/</a>
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%208-38c2416f4f56996abe00d00f30208342.png" width="814" height="131" class="img_ev3q">
<img decoding="async" loading="lazy" alt="Untitled" src="https://suekim3028.github.io/assets/images/Untitled%209-b783368663ae09f482bc1b00099e129b.png" width="920" height="200" class="img_ev3q"></li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="왜-웹-상에서-머신러닝-모델을-구동시켜야-할까">왜 웹 상에서 머신러닝 모델을 구동시켜야 할까?<a href="https://suekim3028.github.io/blog/ml-on-web#%EC%99%9C-%EC%9B%B9-%EC%83%81%EC%97%90%EC%84%9C-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EA%B5%AC%EB%8F%99%EC%8B%9C%EC%BC%9C%EC%95%BC-%ED%95%A0%EA%B9%8C" class="hash-link" aria-label="Direct link to 왜 웹 상에서 머신러닝 모델을 구동시켜야 할까?" title="Direct link to 왜 웹 상에서 머신러닝 모델을 구동시켜야 할까?">​</a></h3>
<ul>
<li>↔ On-Device AI<!-- -->
<ul>
<li>이 경우 내 모바일 기기에 이미 포함되어 있는 형식<!-- -->
<ul>
<li>네트워크 통신 없이도 모델 구동이 이루어짐</li>
</ul>
</li>
<li>웹의 경우 해당 웹페이지를 들어가서 페이지의 데이터를 받아오는 등의 통신은 필요하지만, 이후 해당 페이지에서 필요로하는 AI 모델에 대한 구동을 서버에서 해주지 않고 유저의 하드웨어에서 돌아갈 수 있게 하는 것</li>
</ul>
</li>
<li>WebAssembly 와 JS의 발전</li>
<li>low latency<!-- -->
<ul>
<li>서버와의 통신 시간이 필요하지 않음</li>
</ul>
</li>
<li>high privacy<!-- -->
<ul>
<li>모델에 들어온 데이터가 네트워크 상에서 이동하지 않음</li>
</ul>
</li>
<li>lower serving cost<!-- -->
<ul>
<li>모델이 prediction 을 실행할 때 host website 상에서 실행되기 때문에 유저 디바이스 상에서의 cost임</li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Soobeen Kim</name>
            <uri>https://github.com/suekim3028</uri>
        </author>
        <category label="ml" term="ml"/>
        <category label="web" term="web"/>
        <category label="pwa" term="pwa"/>
    </entry>
</feed>